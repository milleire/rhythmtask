function trial = getTrialDataIvan(filename)if isempty(filename)    NEV = openNEV('nosave');else    NEV = openNEV(filename,'nosave');end%   timestamps: [time(s) code]%   Unused rows in the timestampsBuffer should have a -1 value. %   Codes for neuronal timestamps begin at 9000, and are created as follows:%   9000 + (channelNumber*10) + unitNumber.TimeStamps = [ double(NEV.Data.SerialDigitalIO.TimeStampSec)' double(NEV.Data.SerialDigitalIO.UnparsedData) - 61440];% List of codes that mark the time of a behavioral event (eyeFP_on, reachIni, etc).EventCodes = { 'fixationCentOut'; 'delayGoMov'; 'interTrialCentOut'; 'hitCentOut'; ...               'error'; 'touchTarHit'; 'goMovTouchTar'; 'memRight'; 'memLeft'; ...                'samRight'; 'samLeft'; 'fixation'; 'interTrial'; };% Create the spike time stamps and codesspikeTimeStamps = [double(NEV.Data.Spikes.TimeStamp') double(9000 + double(NEV.Data.Spikes.Electrode)*10 + double(NEV.Data.Spikes.Unit))' ];NeuronCodes = translateEcodesIvan(unique(spikeTimeStamps(logical(spikeTimeStamps(:,2)>9000),2)));% Get the indices of the events that mark the beginning of a trial. TrialDelimitersInit = find(TimeStamps(:,2) == translateEcodesIvan('interTrial') |...                       TimeStamps(:,2) == translateEcodesIvan('interTrialCentOut'));TrialDelimitersInit(end+1) = size(TimeStamps,1);nTrials = length(TrialDelimitersInit)-1;   % Number of trials.% Make sure there is at least one trial.if nTrials < 1    disp([mfilename ':: Trial beginning or end not found.']), trial = []; returnend% Initialize the structure that will hold the data.fields = [EventCodes;NeuronCodes];for k = 1:length(fields)    initValues = cell(1,length(fields));    trial = cell2struct(initValues,fields,2);endtrial(nTrials).interTrial = []; % Expand the structure to its final size.% Loop through each trial.for k = 1: nTrials    TrialIni        = TrialDelimitersInit(k);              % Trial beginning.    TrialEnd        = TrialDelimitersInit(k+1);            % Trial ending.        if TrialIni==TrialEnd         TrialData = TimeStamps(TrialIni:TrialIni,:);    else        TrialData       = TimeStamps(TrialIni:TrialEnd-1,:); % Select the trial TimeStamps.    end    % Take spikes one second before eye fixation    indx = find(TrialData(:,2)==29 | TrialData(:,2)==18,1,'first');    if isempty(indx)        spikeIni = TrialData(1,1); % If no fixation found, get the spikes from the intertrial    else        spikeIni = TrialData(indx,1) - 30000; % Timestamp of the fixation minus 30000 that is one sec at BlackRocks sample freq    end        % Take one second after touch target    spikeEnd        = TimeStamps(TrialEnd-1,1) + 30000;    isTrue          = logical(spikeTimeStamps(:,1)>=spikeIni & spikeTimeStamps(:,1)<=spikeEnd );    TrialSpikes     = spikeTimeStamps(isTrue, : );%keyboard    % To take a look at the trial data    [translateEcodesIvan(TrialData(:,1)/30000) translateEcodesIvan(TrialData(:,2))];    % Trial is not complete until proven otherwise    completeTrial = 0;    isHit = NaN;    go    = NaN;    mov   = NaN;    touch = NaN;    % Loop through each event code to get its time stamp.    for j = 1:length(EventCodes)        i = logical(TrialData(:,2) == translateEcodesIvan(EventCodes{j}));        trial(k).(EventCodes{j}) = TrialData(i,1)/NEV.MetaTags.TimeRes;    end    % Delay initiation in the center out task    trial(k).delayIni = trial(k).delayGoMov;    if length(trial(k).delayGoMov) > 1 % Keep just the delay initiation        trial(k).delayIni = trial(k).delayGoMov(1);    end    if isempty(trial(k).interTrial) % It means the trial is CenterOut        isRhythmTask = 0;        fixation = trial(k).fixationCentOut;        trial(k).interTrialIni = trial(k).interTrialCentOut;        touch = trial(k).hitCentOut;        if ~isempty(touch)            completeTrial = 1;        else            touch = NaN;        end        % Split the delayGoMov        if     length(trial(k).delayGoMov) == 3;            go  = trial(k).delayGoMov(2);            mov = trial(k).delayGoMov(3);        elseif length(trial(k).delayGoMov) == 2;            go  = trial(k).delayGoMov(2);            mov = NaN;        elseif length(trial(k).delayGoMov) == 1;            go  = NaN;            mov = NaN;        end     else % It means the trial is rhythm task        isRhythmTask = 1;        fixation = trial(k).fixation;        trial(k).interTrialIni = trial(k).interTrial;        if   length(trial(k).goMovTouchTar ) == 3            go    = trial(k).goMovTouchTar(1);            mov   = trial(k).goMovTouchTar(2);            touch = trial(k).goMovTouchTar(3);            isHit = 0;            completeTrial = 1;        elseif length(trial(k).goMovTouchTar ) == 2            go    = trial(k).goMovTouchTar(1);            mov   = trial(k).goMovTouchTar(2);            touch = NaN;        elseif length(trial(k).goMovTouchTar ) == 1            go    = trial(k).goMovTouchTar(1);            mov   = NaN;            touch = NaN;        elseif isempty(trial(k).goMovTouchTar )            go    = NaN;            mov   = NaN;            touch = NaN;        end    end    % Touch tar on hits    if ~isempty(trial(k).touchTarHit)        touch = trial(k).touchTarHit;        isHit = 1;        completeTrial = 1;    end    trial(k).goCue         = go;    trial(k).reachIni      = mov;    trial(k).touchTar      = touch;    trial(k).isHit         = isHit;    trial(k).completeTrial = completeTrial;    trial(k).isRhythmTask  = isRhythmTask;    % Split the eye and hand fixation    if     length(fixation) == 2        trial(k).eyeFixation  = fixation(1);        trial(k).handFixation = fixation(2);    elseif length(fixation) == 1        trial(k).eyeFixation  = fixation(1);        trial(k).handFixation = NaN;    elseif isempty(fixation)        trial(k).eyeFixation  = NaN;        trial(k).handFixation = NaN;    end  % Trial duration    if ~isempty(trial(k).samRight) && ~isempty(trial(k).samLeft)        intDur = abs(trial(k).samRight(1)-trial(k).samLeft(1));        if     intDur > 28/60 && intDur < 33/60            trial(k).intDuration = 30/60;        elseif intDur > 37/60 && intDur < 39/60            trial(k).intDuration = 38/60;        elseif intDur > 44/60 && intDur < 46/60            trial(k).intDuration = 45/60;        elseif intDur > 52/60 && intDur < 54/60            trial(k).intDuration = 53/60;        elseif intDur > 59/60 && intDur < 62/60            trial(k).intDuration = 60/60;        else            trial(k).intDuration = intDur;        end%        trial(k).intDuration = intDur;    else        trial(k).intDuration = NaN;    end   % Split the go, movement, touch   % Change response value from string ('wrong' or 'correct') to number (1:correct, 0:wrong)   % Indicate if trials isCorrect (1) or not (0)%   trial(k).isCorrect = (7131 == StrippedData(i+1,2));   % Get the spiketimes of each neuron.   if ~iscell(NeuronCodes)      NeuronCodes = {NeuronCodes};   end   for j = 1:size(NeuronCodes,1)      SpkTimes = TrialSpikes(logical((TrialSpikes(:,2)) == translateEcodesIvan(NeuronCodes{j})),1);      trial(k).(NeuronCodes{j}) = SpkTimes/NEV.MetaTags.TimeRes;   end   % Calculate the number of sample intervals   if trial(k).isRhythmTask      trial(k).numSamInts = ( length(trial(k).samRight) + length(trial(k).samLeft) ) - 1;      % Calculate the number of memory intervals      trial(k).numMemInts = ( length(trial(k).memRight) + length(trial(k).memLeft) );    else      trial(k).numSamInts = NaN;      trial(k).numMemInts = NaN;    endend%trial = rmfield(trial,{'fixationCentOut','fixation','interTrial','interTrialCentOut'});